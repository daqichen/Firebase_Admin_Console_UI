[
    {
        "section_id":"0",
        "title":"Overview",
        "details":[{
            "paragraph_id":"1",
            "content":"<strong>Firebase Admin Console<\/strong> is a centralized platform for easy viewing and maintenance of Firestore database, the application's front-end is built in ReactJS, and the back-end API is a Python Flask app. This application serves as a starting template for developers to customize, build, and even deploy the desired admin console for their DB. ",
            "contains_code":"false",
            "code":"",
            "code_lang":""
        },
        {
            "paragraph_id":"2",
            "content":"While this design doc will walk you through the main features with code examples, a more detailed and more structured guide can be found at this <a href=\"https://locrian-colt-32b.notion.site/Firebase-Admin-Console-d4bd55aac10245aa8b208871c1eb23ed\">Notion Notebook<\/a>. And of course, if you would like to get started right away on customizing this template, the entire codebase is accessible on <a href=\"https://daqichen.github.io/\">GitHub<\/a>. ",
            "contains_code":"false",
            "code":"",
            "code_lang":""
        },
        {
            "paragraph_id":"3",
            "content":"",
            "contains_code":"false",
            "code":"",
            "code_lang":""
        },
        {
            "paragraph_id":"1",
            "content":"",
            "contains_code":"false",
            "code":"",
            "code_lang":""
        }]
        
    },
    {
        "section_id":"1.1",
        "title":"Python Flask App and Firestore DB Setup",
        "details":[{
            "paragraph_id":"1",
            "content":"Assuming that you already have a Firestore NoSQL database up and running, you can built a CRUD (Create, Read, Update, and Delete) API using Flask in Python. To set up your Firestore DB, here is a <a href=\"https://medium.com/google-cloud/building-a-flask-python-crud-api-with-cloud-firestore-firebase-and-deploying-on-cloud-run-29a10c502877\">Medium article<\/a> to help you get started. The objective is to allow your front-end application to access data, or documents in a NoSQL context, stored in your Firestore database on Firebase. Below is the set up for <strong>/app.py<\/strong>.",
            "contains_code":"true",
            "code":"FLASK_FIRESTORE_SETUP",
            "code_lang":"python"
        },
        {
            "paragraph_id":"2",
            "content":"All the necessary libraries required are listed in <strong>/requirement.txt<\/strong>.",
            "contains_code":"true",
            "code":"REQUIREMENT",
            "code_lang":"Plain Text"
        }]
    },
    {
        "section_id":"1.2",
        "title":"CRUD Requests",
        "details":[{
            "paragraph_id":"1",
            "content":"Create, Read, Update, and Delete (CRUD) are the basic four back-end operations you should be able to execute upon the DB. And one of the most basic operations you might want to perform is to <strong>READ<\/strong> and view all the documents in your DB (in NoSQL DB, datapoints are referred to as \"documents\"). This can also act as a sanity check for the configuration in your Flask app to connect with your Firestore DB.",
            "contains_code":"true",
            "code":"LIST",
            "code_lang":"Python"
        },
        {
            "paragraph_id":"2",
            "content":"Once you run your flask app, you can navigate to the port it is running on and navigate to PORT_URL/list, the documents should be displayed in JSON format. Now that you can access the existing documents, it's time to implement <strong>CREATE<\/strong>.",
            "contains_code":"true",
            "code":"ADD",
            "code_lang":"Python"
        },
        {
            "paragraph_id":"3",
            "content":"You probably noticed the import statement for a module named \"Origami\". I have dedicated a <a href=\"https://locrian-colt-32b.notion.site/Better-alternative-Fireclass-acde50619f074c358f0f99461b6f1f8b\">page<\/a> on Notion with more details on utilizing dataclasses in Python and its compatibility with JSON to simplify creating new documents and standardizing the set of fields each document has. Meanwhile, below is the implementation code for <strong>/origamimodule.py</strong>.",
            "contains_code":"true",
            "code":"ORIGAMI_MODULE",
            "code_lang":""
        },
        {
            "paragraph_id":"4",
            "content":"Next is <strong>UPDATE</strong>, which is very similar to CREATE. The main distinction is that UPDATE requires you to know the corresponding document ID of which you are attempting to update. In Firestore DB, you can either auto-generate IDs or assign them yourself; here in this template, they are auto-generated.",
            "contains_code":"true",
            "code":"UPDATE",
            "code_lang":"Python"
        },
        {
            "paragraph_id":"5",
            "content":"Last but not least, is <strong>DELETE</strong>. ",
            "contains_code":"true",
            "code":"DELETE",
            "code_lang":"Python"
        }]
        
    },
    {
        "section_id":"1.3",
        "title":"Deployment on Heroku!!",
        "details":[{
            "paragraph_id":"1",
            "content":"Now that you have a fully functioning back-end API, it is time to make it accessible beyond your local machine! For back-end, I decided to deploy the API endpoint on <a href=\"https://realpython.com/flask-by-example-part-1-project-setup/\">Heroku</a>. The following shell command creates a <strong>/Procfile</strong> that is necessary for Heroku deployment. The article linked previously has a detailed walk-thru, from creating a Flask App to deployment.",
            "contains_code":"true",
            "code":"HEROKU",
            "code_lang":"shell"
        },
        {
            "paragraph_id":"2",
            "content":"Congrats, that is a wrap on the back-end part. It is important to note that the sourcecode on GitHub will contain some additional code on filtering parameters passed in from the front-end application requests. They are omitted here to avoid any confusion. ",
            "contains_code":"false",
            "code":"",
            "code_lang":""
        }]
    },    
    {
        "section_id":"2.1",
        "title":"Create React App",
        "details":[{
            "paragraph_id":"1",
            "content":"For front-end, the Admin Console relied on <strong>ReactJS</strong> framework. The following code will quickly set up a React application for you. I encountered various errors while setting up React, upgrading my Node.js resolved the initial build issue. On Notion, I included links to all the forum posts (Stack Overflow, GitHub Issues, etc.) where I found the solutions to those problems; another reason I highly recommend looking through the Notion pages.",
            "contains_code":"true",
            "code":"REACT_APP",
            "code_lang":"Python"
        },
        {
            "paragraph_id":"2",
            "content":"The list of dependencies used by Firebase Admin Console UI. ",
            "contains_code":"true",
            "code":"DEPENDENCIES",
            "code_lang":"Python"
        },
        {
            "paragraph_id":"3",
            "content":"Below is the folder/file structure. <strong>(Disclaimer: by all means, this template's set-up might not follow the best practices for React App, since this project is my first attempt at full-stack dev from scratch and is still an on-going effort.)</strong> ",
            "contains_code":"true",
            "code":"FOLDER_STRUCTURE",
            "code_lang":"Python"
        }]
    },
    {
        "section_id":"2.2",
        "title":"Firebase Auth Set Up",
        "details":[{
            "paragraph_id":"1",
            "content":"As is true for most administrative tool, this application features Firebase Auth and restrict certain access to logged-in users. Here is a great <a href=\"https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial/\">article</a> that goes into extensive details of setting up Firebase Auth, although it is a slightly different approach than the template, it does offer more sophisticated operations on userbase. In this template app, it allows for basic functions like Sign-in, Sign-out, Update profile. Sign-up is not allowed since it is admin access only, therefore new users will be registered directly on the Firebase console. Below is the implementation for <strong>/firebase.js</strong>.",
            "contains_code":"true",
            "code":"FIREBASE_JS",
            "code_lang":"JS"
        },
        {
            "paragraph_id":"2",
            "content":"Then <strong>/context.js</strong>.",
            "contains_code":"true",
            "code":"CONTEXT_JS",
            "code_lang":"JS"
        },
        {
            "paragraph_id":"3",
            "content":"And lastly, <strong>/index.js</strong>.",
            "contains_code":"true",
            "code":"INDEX_JS",
            "code_lang":"JS"
        }]
    },
    {
        "section_id":"2.3",
        "title":"React Firebase Auth Hook",
        "details":[{
            "paragraph_id":"1",
            "content":"After setting up Firebase Auth, accessing the current logged-in session, are detecting unauthorized access by a user who's not logged-in are the next steps. I found a package at this <a href=\"https://github.com/CSFrequency/react-firebase-hooks/tree/11aa6dc474743ff1db44dbb8342c73f463fa4566/auth\">GitHub Repo</a> that neatly incorporate the state hooks in React into Firebase Auth. An example of a <strong>User.js</strong> utilizing useAuthState: ",
            "contains_code":"true",
            "code":"AUTHENTICATION",
            "code_lang":"JS"
        }]
    },
    {
        "section_id":"2.4",
        "title":"Useful React-Bootstrap Components",
        "details":[{
            "paragraph_id":"1",
            "content":"Perhaps the name of this app appearing at the top left corner is already a give-away, the front-end part of developing this project truly pushed me out of my comfort zone; and in particular, styling. <a href=\"https://react-bootstrap.github.io/forms/overview/\">React-Bootstrap</a> was an immense time-saver throughout the development process, and three components were used extensively, <strong>forms, buttons, and offcanvas</strong>. One example of each component will be demonstrated below from a React component in this template.",
            "contains_code":"false",
            "code":"",
            "code_lang":""
        },
        {
            "paragraph_id":"2",
            "content":"In <strong>/SignInForm.js</strong>, all three of these components are seen working simultaneously together. To see it in action, try clicking on the button <strong>\"Log in/Sign Up\"</strong> on the top right corner.",
            "contains_code":"true",
            "code":"FORM",
            "code_lang":"JS"
        }]
    },
    {
        "section_id":"2.5",
        "title":"Tie Together Front-end and Back-end: Origami (Demo Collection)",
        "details":[{
            "paragraph_id":"1",
            "content":"Origami is undeniably my favorite hobby in the world, therefore it is no surprise that I chose to build this template with a back-end DB on origami models. <a href=\"%PUBLIC_URL%/origami\">Origami</a> is a <strong>Firestore Collection</strong>, each of the model is a <strong>document</strong> with various fields, such as creator, number of steps, and so on. But how exactly is the back-end and front-end of this application talking to each other? ",
            "contains_code":"false",
            "code":"",
            "code_lang":""
        },
        {
            "paragraph_id":"2",
            "content":"Make sure both your back-end Flask app and your front-end React app are running on some port. Then, utilizing <strong>fetchURL, useEffect</strong> in ReactJS to send HTTP request(s), at page launching and after some user inputs like filtering options. <strong>/OrigamiCard.js</strong> has all these functionalities and more, shown below: ",
            "contains_code":"true",
            "code":"ORIGAMI",
            "code_lang":"JS"
        }]
    }
]